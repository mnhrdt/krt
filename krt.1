.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.1.
.TH KRT "1" "October 2022" "krt 1.0" "User Commands"
.SH NAME
krt \- manual page for krt 1.0
.SH SYNOPSIS
.B krt
\fI\,KERNEL \/\fR[\fI\,-h HEAVISIDE\/\fR] \fI\,in out\/\fR
.br
.B krt
\fI\,KERNEL \/\fR[\fI\,-h HEAVISIDE\/\fR] \fI\,in > out\/\fR
.br
.B cat
\fI\,in | krt KERNEL \/\fR[\fI\,-h HEAVISIDE\/\fR] \fI\,> out\/\fR
.SH DESCRIPTION
Krt computes the kernel rank transform of an image
.PP
The kernel rank transform is like the classical rank transform, but
using weighted neighborhoods, defined by a user\-supplied kernel.
The output image has the same size as the input and its values are between
0 and 1.  If the pixels have several components, each component image is
treated independently.
.SS "Kernels:"
.TP
actualsquareN
discrete square of size N x N
.TP
diskR
discrete disk of radius R
.TP
squareX
square of size (2N+1) x (2N+1)
.TP
gaussX
gaussian kernel of sigma S
.TP
cauchyX
cauchy kernel of sigma S
.TP
laplaceX
laplace kernel of sigma S
.TP
landcX
truncated land kernel of sigma S
.TP
file.npy
read the kernel weights from an image file
.SS "Heaviside:"
.TP
h
Discrete Heaviside function
.TP
gapR
Heaviside function with a gap of radius R
.TP
logisticK
logistic function scaled by a factor K
.TP
arctanK
arc tangent function scaled by a factor K
.TP
erfK
error function scaled by a factor K
.SH OPTIONS
.TP
\fB\-\-help\fR
print help message
.TP
\fB\-\-version\fR
print version number
.TP
\fB\-ox\fR X
horizontal offset X pixels the center of the kernel
.TP
\fB\-oy\fR X
vertical offset X pixels the center of the kernel
.TP
\fB\-nn\fR
do not normalize the kernel weights
.TP
\fB\-kc\fR
keep the center of the discrete kernel
.SH EXAMPLES
.TP
krt square7 h i.png o.tif
Classic rank transform of 49\-pixel neighborhood
.TP
krt gauss2.7 h i.png o.tif
Gaussian\-weighted kernel rank transform
.SH AUTHOR
Written by RGvG and EML
.SH "REPORTING BUGS"
Report bugs to <grompone@gmail.com>
